name: Deploy

on:
  workflow_call:
    inputs:
      serviceName:
        required: true
        type: string
        description: 'The name of the service to deploy'
      dockerImage:
        required: true
        type: string
        description: 'The name of the docker image to deploy'

jobs:
  copy-files:
    runs-on: ubuntu-latest
    environment: Production

    steps:
    - name: Checkout the code
      uses: actions/checkout@v4

    - name: Create folder
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        port: ${{ secrets.SSH_PORT }}
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          mkdir -p ~/analytics

    - name: Copy docker-compose.yml and nginx.conf
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        port: ${{ secrets.SSH_PORT }}
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        source: "docker-compose.yml,nginx.conf"
        target: "~/analytics"

  override-docker-file:
    runs-on: ubuntu-latest
    needs: [copy-files]
    environment: Production

    steps:
    - name: Create docker-compose override
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        port: ${{ secrets.SSH_PORT }}
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          FILE=~/analytics/docker-compose.override.yml
          SERVICE="${{ inputs.serviceName }}"
          IMAGE="${{ inputs.dockerImage }}"

          # Check if not exists and create
          if [ ! -f "$FILE" ]; then
            echo -e "services:\n  api:\n    profiles: [disable]\n  web:\n    profiles: [disable]" > "$FILE"
          fi

          # Search for the service and replace the image
          if grep -q "$SERVICE:" "$FILE"; then
            sed -i "s|$SERVICE:.*|$SERVICE:\n    image: $IMAGE\n    profiles: [prod]|" "$FILE"
          fi

  create-env-file:
    runs-on: ubuntu-latest
    needs: [copy-files]
    environment: Production

    steps:
    - name: Create .env file
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        port: ${{ secrets.SSH_PORT }}
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          echo -e "DB_PASSWORD=${{ secrets.DB_PASSWORD }}\nDB_DATABASE=${{ secrets.DB_DATABASE }}\nDB_USER=${{ secrets.DB_USER }}\nCOMPOSE_PROFILES=prod" > ~/analytics/.env

  docker-compose-up:
    runs-on: ubuntu-latest
    needs: [copy-files, override-docker-file, create-env-file]
    environment: Production

    steps:
    - name: Start the containers
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        port: ${{ secrets.SSH_PORT }}
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          cd ~/analytics &&
          docker compose -f docker-compose.yml -f docker-compose.override.yml --env-file .env up -d