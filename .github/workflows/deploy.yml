name: Deploy

on:
  workflow_call:
    inputs:
      serviceName:
        required: true
        type: string
        description: 'The name of the service to deploy'
      dockerImage:
        required: true
        type: string
        description: 'The name of the docker image to deploy'

jobs:
  copy-files:
    runs-on: ubuntu-latest
    environment: Production

    steps:
    - name: Checkout the code
      uses: actions/checkout@v4

    - name: Create folder
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        port: ${{ secrets.SSH_PORT }}
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          mkdir -p ~/analytics

    - name: Copy docker-compose.yml and nginx.conf
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        port: ${{ secrets.SSH_PORT }}
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        source: "docker-compose.yml"
        target: "~/analytics"

  override-docker-file:
    runs-on: ubuntu-latest
    needs: [copy-files]
    environment: Production

    steps:
    - name: Create docker-compose override
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        port: ${{ secrets.SSH_PORT }}
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          FILE=~/analytics/docker-compose.override.yml
          SERVICE="${{ inputs.serviceName }}"
          IMAGE="${{ inputs.dockerImage }}"

          # Check if not exists and create
          if [ ! -f "$FILE" ]; then
            echo -e "services:\n  backend:\n    profiles: [deactivate]\n    image: 'null'\n  frontend:\n    profiles: [deactivate]\n    image: 'null'" > "$FILE"
          fi

          # Search for the service and replace the image
          if grep -q "$SERVICE:" "$FILE"; then
            sed -i "/$SERVICE:/,/profiles:/{s|profiles:.*|profiles: [active]|} ; /$SERVICE:/,/image:/{s|image:.*|image: '$IMAGE'|}" "$FILE"
          fi

  create-env-file:
    runs-on: ubuntu-latest
    needs: [copy-files]
    environment: Production

    steps:
    - name: Create .env file
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        port: ${{ secrets.SSH_PORT }}
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          cat <<EOF > ~/analytics/.env
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          DB_USER=${{ secrets.DB_USER }}
          EMAIL_USER=${{ vars.EMAIL_USER }}
          EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
          R2_ACCESS_KEY=${{ secrets.R2_ACCESS_KEY }}
          R2_SECRET_KEY=${{ secrets.R2_SECRET_KEY }}
          R2_BUCKET_NAME=${{ vars.R2_BUCKET_NAME }}
          R2_REGION=${{ secrets.R2_REGION }}
          R2_ENDPOINT=${{ secrets.R2_ENDPOINT }}
          URL_BACKEND=${{ vars.URL_BACKEND }}
          PORT_BACKEND=${{ vars.PORT_BACKEND }}
          PORT_FRONTEND=${{ vars.PORT_FRONTEND }}
          PORT_FRONTEND_NITRO=${{ vars.PORT_FRONTEND_NITRO }}
          COMPOSE_PROFILES=active
          EOF

  docker-compose-up:
    runs-on: ubuntu-latest
    needs: [copy-files, override-docker-file, create-env-file]
    environment: Production

    steps:
    - name: Start the containers
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        port: ${{ secrets.SSH_PORT }}
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          cd ~/analytics &&
          docker compose -f docker-compose.yml -f docker-compose.override.yml --env-file .env up -d